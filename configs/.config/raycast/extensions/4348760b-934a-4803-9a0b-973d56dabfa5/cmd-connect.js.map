{
  "version": 3,
  "sources": ["../src/cmd-connect.tsx", "../src/sesh.ts", "../src/env.ts", "../src/app.ts"],
  "sourcesContent": ["import { useState, useEffect } from \"react\";\n\nimport {\n  Icon,\n  List,\n  Action,\n  ActionPanel,\n  closeMainWindow,\n  clearSearchBar,\n  showToast,\n  Toast,\n  Color,\n} from \"@raycast/api\";\nimport { getSessions, connectToSession, isTmuxRunning, Session } from \"./sesh\";\nimport { openApp } from \"./app\";\n\nfunction getIcon(session: Session) {\n  switch (session.Src) {\n    case \"tmux\":\n      return {\n        source: Icon.Bolt,\n        tintColor: session.Attached >= 1 ? Color.Green : Color.Blue,\n        tooltip: session.Attached >= 1 ? \"Attached\" : \"Detached\",\n      };\n    case \"config\":\n      return {\n        source: Icon.Cog,\n        tintColor: Color.SecondaryText,\n      };\n    case \"zoxide\":\n    default:\n      return {\n        source: Icon.Folder,\n        tintColor: Color.SecondaryText,\n      };\n  }\n}\n\nfunction formatScore(score: number) {\n  if (score === 0) return undefined;\n  return String(Number.isInteger(score) ? score : score.toFixed(2));\n}\n\nexport default function ConnectCommand() {\n  const [sessions, setSessions] = useState<{\n    tmux: Array<Session>;\n    config: Array<Session>;\n    zoxide: Array<Session>;\n  }>({ tmux: [], config: [], zoxide: [] });\n  const [isLoading, setIsLoading] = useState(true);\n\n  async function getAndSetSessions() {\n    try {\n      const sessions = await getSessions();\n      setSessions({\n        tmux: sessions.filter((s) => s.Src === \"tmux\"),\n        config: sessions.filter((s) => s.Src === \"config\"),\n        zoxide: sessions.filter((s) => s.Src === \"zoxide\"),\n      });\n    } catch (error) {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Couldn't get sessions\",\n        message: typeof error === \"string\" ? error : \"Unknown reason\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    (async () => {\n      if (!(await isTmuxRunning())) {\n        await showToast({\n          style: Toast.Style.Failure,\n          title: \"tmux isn't running\",\n          message: \"Please start tmux before using this command.\",\n        });\n        setIsLoading(false);\n        return;\n      }\n      await getAndSetSessions();\n    })();\n  }, []);\n\n  async function connect(session: string) {\n    try {\n      setIsLoading(true);\n      await connectToSession(session);\n      await openApp();\n      await closeMainWindow();\n      await clearSearchBar();\n    } catch (error) {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: \"Couldn't connect to session\",\n        message: typeof error === \"string\" ? error : \"Unknown reason\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <List isLoading={isLoading}>\n      <List.Section title=\"tmux\">\n        {sessions.tmux.map((session, index) => (\n          <List.Item\n            key={index}\n            title={session.Name}\n            icon={getIcon(session)}\n            accessories={[\n              {\n                icon: Icon.AppWindow,\n                text: String(session.Windows),\n                tooltip: session.Windows === 1 ? \"Window\" : \"Windows\",\n              },\n            ]}\n            actions={\n              <ActionPanel>\n                <Action title=\"Connect to Session\" onAction={() => connect(session.Name)} />\n              </ActionPanel>\n            }\n          />\n        ))}\n      </List.Section>\n\n      <List.Section title=\"config\">\n        {sessions.config.map((session, index) => (\n          <List.Item\n            key={index}\n            title={session.Name}\n            icon={getIcon(session)}\n            accessories={[{ text: formatScore(session.Score), icon: Icon.Racket, tooltip: \"Score\" }]}\n            actions={\n              <ActionPanel>\n                <Action title=\"Connect to Session\" onAction={() => connect(session.Name)} />\n              </ActionPanel>\n            }\n          />\n        ))}\n      </List.Section>\n\n      <List.Section title=\"zoxide\">\n        {sessions.zoxide.map((session, index) => (\n          <List.Item\n            key={index}\n            title={session.Name}\n            icon={getIcon(session)}\n            accessories={[{ text: formatScore(session.Score), icon: Icon.Racket, tooltip: \"Score\" }]}\n            actions={\n              <ActionPanel>\n                <Action title=\"Connect to Session\" onAction={() => connect(session.Name)} />\n              </ActionPanel>\n            }\n          />\n        ))}\n      </List.Section>\n    </List>\n  );\n}\n", "import { exec } from \"child_process\";\nimport { env } from \"./env\";\n\nexport interface Session {\n  Src: string; // tmux or zoxide\n  Name: string; // The display name\n  Path: string; // The absolute directory path\n  Score: number; // The score of the session (from Zoxide)\n  Attached: number; // Whether the session is currently attached\n  Windows: number; // The number of windows in the session\n}\n\nexport function getSessions() {\n  return new Promise<Session[]>((resolve, reject) => {\n    exec(`sesh list --json`, { env }, (error, stdout, stderr) => {\n      if (error || stderr) {\n        return reject(`Please upgrade to the latest version of the sesh CLI`);\n      }\n      const sessions = JSON.parse(stdout);\n      return resolve(sessions ?? []);\n    });\n  });\n}\n\nexport function connectToSession(session: string): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    exec(`sesh connect --switch \"${session}\"`, { env }, (error, _, stderr) => {\n      if (error || stderr) {\n        console.error(\"error \", error);\n        console.error(\"stderr \", stderr);\n        return reject(error?.message ?? stderr);\n      }\n      return resolve();\n    });\n  });\n}\n\nexport function isTmuxRunning(): Promise<boolean> {\n  return new Promise<boolean>((resolve) => {\n    exec(`tmux ls`, { env }, (error, _, stderr) => resolve(!(error || stderr)));\n  });\n}\n", "export const env = Object.assign({}, process.env, {\n  PATH: \"/usr/local/bin:/usr/bin:/opt/homebrew/bin:/run/current-system/sw/bin\",\n});\n", "import { Application, getPreferenceValues } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { env } from \"./env\";\n\ninterface Preferences {\n  openWithApp: Application;\n}\n\nexport function openApp() {\n  const { openWithApp } = getPreferenceValues<Preferences>();\n  return new Promise<void>((resolve, reject) => {\n    exec(`open -a ${openWithApp.name}`, { env }, (error, _, stderr) => {\n      if (error || stderr) return reject(error?.message ?? stderr);\n      return resolve();\n    });\n  });\n}\n"],
  "mappings": "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",
  "names": ["cmd_connect_exports", "__export", "ConnectCommand", "__toCommonJS", "import_react", "import_api", "import_child_process", "env", "getSessions", "resolve", "reject", "env", "error", "stdout", "stderr", "sessions", "connectToSession", "session", "_", "isTmuxRunning", "import_api", "import_child_process", "openApp", "openWithApp", "resolve", "reject", "env", "error", "_", "stderr", "import_jsx_runtime", "getIcon", "session", "formatScore", "score", "ConnectCommand", "sessions", "setSessions", "isLoading", "setIsLoading", "getAndSetSessions", "getSessions", "error", "isTmuxRunning", "connect", "connectToSession", "openApp", "index"]
}
