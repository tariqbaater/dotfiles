{
  "version": 3,
  "sources": ["../src/generate-random-password.tsx", "../src/helpers/helpers.ts"],
  "sourcesContent": ["import {\n  Action,\n  ActionPanel,\n  Clipboard,\n  Form,\n  PopToRootType,\n  Toast,\n  getPreferenceValues,\n  showHUD,\n  showToast,\n} from \"@raycast/api\";\n\nimport { generatePassword } from \"@/helpers/helpers\";\n\ninterface Preferences {\n  hideAfterCopy: boolean;\n  storePasswordLength: boolean;\n}\n\ninterface Form {\n  length: string;\n  useNumbers: 1 | 0;\n  useChars: 1 | 0;\n}\n\nconst handleGeneratePassword = (values: Form) => {\n  const { hideAfterCopy } = getPreferenceValues<Preferences>();\n\n  const length = parseInt(values.length, 10);\n  const useNumbers = Boolean(values.useNumbers);\n  const useChars = Boolean(values.useChars);\n\n  if (!Number.isFinite(length)) {\n    showToast(Toast.Style.Failure, \"Password length must be a number\");\n    return;\n  }\n\n  if (length < 5 || length > 64) {\n    showToast(Toast.Style.Failure, \"Password length must be between 5 and 64\");\n    return;\n  }\n\n  const generatedPassword = generatePassword(length, useNumbers, useChars);\n\n  Clipboard.copy(generatedPassword);\n\n  if (hideAfterCopy) {\n    showHUD(`Copied Password - ${generatedPassword} \uD83C\uDF89`, {\n      clearRootSearch: false,\n      popToRootType: PopToRootType.Suspended,\n    });\n  } else {\n    showToast(Toast.Style.Success, \"Copied Password \uD83C\uDF89\", generatedPassword);\n  }\n};\n\nexport default function Command() {\n  const { storePasswordLength } = getPreferenceValues<Preferences>();\n\n  return (\n    <Form\n      navigationTitle=\"Password Generator\"\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Generate Password\" onSubmit={(values: Form) => handleGeneratePassword(values)} />\n        </ActionPanel>\n      }\n    >\n      <Form.TextField\n        id=\"length\"\n        title=\"Number of characters\"\n        placeholder=\"Enter a number between 5 and 64\"\n        storeValue={storePasswordLength}\n      />\n      <Form.Checkbox id=\"useNumbers\" label=\"Use numbers?\" defaultValue={true} />\n      <Form.Checkbox id=\"useChars\" label=\"Use special characters?\" defaultValue={true} />\n    </Form>\n  );\n}\n", "import crypto from \"node:crypto\";\n\nimport { words } from \"@/words\";\n\nconst numbers = \"23456789\";\nconst symbols = \"!@#$*^&%\";\n\nexport function generatePassword(len: number, useNumbers: boolean, useChars: boolean): string {\n  let charset = \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\";\n\n  if (useNumbers) {\n    charset += numbers;\n  }\n\n  if (useChars) {\n    charset += symbols;\n  }\n\n  let retVal = \"\";\n\n  for (let i = 0; i < len; ++i) {\n    retVal += charset.charAt(crypto.randomInt(charset.length));\n  }\n\n  return retVal;\n}\n\nexport function generateCustomPassword(format: string): string {\n  // Set to keep track of used words to avoid repetition\n  const usedWords = new Set<string>();\n\n  // Generates a string of random characters from a given charset\n  function generateRandomChars(charset: string, length: number): string {\n    let result = \"\";\n    for (let i = 0; i < length; i++) {\n      result += charset[crypto.randomInt(charset.length)];\n    }\n    return result;\n  }\n\n  // Replace each format placeholder with the corresponding generated content.\n  // This regex matches placeholders in the format {type:modifier}\n  // where type is a word (e.g., word, random, symbol, number)\n  // and modifier is optional (e.g., uppercase, lowercase, or a number for length)\n  return format.replace(/{(\\w+)(:(\\w+))?}/g, (match, type, _, modifier) => {\n    const length = parseInt(modifier, 10) || 1;\n    let word;\n\n    switch (type) {\n      case \"word\":\n        // Keep generating words until we find one that hasn't been used\n        do {\n          word = words[crypto.randomInt(words.length)].trim();\n        } while (usedWords.has(word));\n\n        usedWords.add(word);\n        // Apply the appropriate case modification\n        if (modifier === \"uppercase\") {\n          return word.toUpperCase();\n        } else if (modifier === \"lowercase\") {\n          return word.toLowerCase();\n        } else if (modifier === \"capitalize\") {\n          return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n        } else {\n          // If no case is specified, randomly choose uppercase or lowercase\n          return crypto.randomInt(2) === 0 ? word : word.toUpperCase();\n        }\n      case \"random\":\n        return generatePassword(length, true, true);\n      case \"symbol\":\n        return generateRandomChars(symbols, length);\n      case \"number\":\n        return generateRandomChars(numbers, length);\n      default:\n        return match;\n    }\n  });\n}\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAUO,wBCVP,IAAAC,EAAmB,0BAInB,IAAMC,EAAU,WACVC,EAAU,WAET,SAASC,EAAiBC,EAAaC,EAAqBC,EAA2B,CAC5F,IAAIC,EAAU,oDAEVF,IACFE,GAAWN,GAGTK,IACFC,GAAWL,GAGb,IAAIM,EAAS,GAEb,QAASC,EAAI,EAAGA,EAAIL,EAAK,EAAEK,EACzBD,GAAUD,EAAQ,OAAO,EAAAG,QAAO,UAAUH,EAAQ,MAAM,CAAC,EAG3D,OAAOC,CACT,CDmCI,IAAAG,EAAA,6BAnCEC,EAA0BC,GAAiB,CAC/C,GAAM,CAAE,cAAAC,CAAc,KAAI,uBAAiC,EAErDC,EAAS,SAASF,EAAO,OAAQ,EAAE,EACnCG,EAAa,EAAQH,EAAO,WAC5BI,EAAW,EAAQJ,EAAO,SAEhC,GAAI,CAAC,OAAO,SAASE,CAAM,EAAG,IAC5B,aAAU,QAAM,MAAM,QAAS,kCAAkC,EACjE,MACF,CAEA,GAAIA,EAAS,GAAKA,EAAS,GAAI,IAC7B,aAAU,QAAM,MAAM,QAAS,0CAA0C,EACzE,MACF,CAEA,IAAMG,EAAoBC,EAAiBJ,EAAQC,EAAYC,CAAQ,EAEvE,YAAU,KAAKC,CAAiB,EAE5BJ,KACF,WAAQ,qBAAqBI,CAAiB,aAAO,CACnD,gBAAiB,GACjB,cAAe,gBAAc,SAC/B,CAAC,KAED,aAAU,QAAM,MAAM,QAAS,4BAAsBA,CAAiB,CAE1E,EAEe,SAARE,GAA2B,CAChC,GAAM,CAAE,oBAAAC,CAAoB,KAAI,uBAAiC,EAEjE,SACE,QAAC,QACC,gBAAgB,qBAChB,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CAAkB,MAAM,oBAAoB,SAAWR,GAAiBD,EAAuBC,CAAM,EAAG,EAC3G,EAGF,oBAAC,OAAK,UAAL,CACC,GAAG,SACH,MAAM,uBACN,YAAY,kCACZ,WAAYQ,EACd,KACA,OAAC,OAAK,SAAL,CAAc,GAAG,aAAa,MAAM,eAAe,aAAc,GAAM,KACxE,OAAC,OAAK,SAAL,CAAc,GAAG,WAAW,MAAM,0BAA0B,aAAc,GAAM,GACnF,CAEJ",
  "names": ["generate_random_password_exports", "__export", "Command", "__toCommonJS", "import_api", "import_node_crypto", "numbers", "symbols", "generatePassword", "len", "useNumbers", "useChars", "charset", "retVal", "i", "crypto", "import_jsx_runtime", "handleGeneratePassword", "values", "hideAfterCopy", "length", "useNumbers", "useChars", "generatedPassword", "generatePassword", "Command", "storePasswordLength"]
}
